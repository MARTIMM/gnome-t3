use v6;

use lib 'xt/testlibs';
use GuiTest01;

# << gui test module >>
use Gnome::T::Gui;

# << inhibit from program >>
#use Gnome::Gtk3::Main;


use Gnome::Gtk3::Builder;

#-------------------------------------------------------------------------------
# load interface description
my Gnome::Gtk3::Builder $gui-description .= new(
  :file<xt/Data/test-interface-01.xml>
);

# create handlers table and register all signals
my GuiTest01 $h .= new;
$gui-description.connect-signals-full( %(
    :exit-program($h),
    :copy-text($h),
    :clear-text($h),
  )
);



# << test code >>
# create tested widgets table
my Hash $widgets = %(
  :window( 'Gnome::Gtk3::Window', $gui-description.get-object('window')),
  :inputTxt( 'Gnome::Gtk3::TextView', $gui-description.get-object('inputTxt')),
  :outputTxt(
    'Gnome::Gtk3::TextView', $gui-description.get-object('outputTxt')
  ),
  :copyBttn( 'Gnome::Gtk3::Button', $gui-description.get-object('copyBttn')),
  :clearBttn( 'Gnome::Gtk3::Button', $gui-description.get-object('clearBttn')),
  :quitBttn( 'Gnome::Gtk3::Button', $gui-description.get-object('quitBttn')),
);

# << test code >>
# load test protocol
given my Gnome::T::Gui $gui-test .= new {
  .load-test-protocol('xt/Data/test-protocol-01.yaml');
  .set-widgets-table($widgets);
  .set-top-widget('window');
  .run-test-protocol;
}

#`{{ << inhibit from program >>
my Gnome::Gtk3::Window $w .= new(
  :native-object($gui-description.get-object('window'))
);

$w.show-all;
Gnome::Gtk3::Main.new.gtk-main;
}}
